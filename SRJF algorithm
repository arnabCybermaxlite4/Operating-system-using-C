#include <stdio.h>
#include <limits.h> // For INT_MAX

// Structure to represent a process
struct Process {
    int pid;           // Process ID
    int arrivalTime;   // Arrival Time
    int burstTime;     // Burst Time
    int remainingTime; // Remaining Burst Time
    int completionTime;// Completion Time
    int turnaroundTime;// Turnaround Time
    int waitingTime;   // Waiting Time
};

int main() {
    int n, completed = 0, currentTime = 0;
    float avgTAT = 0, avgWT = 0;

    // Input number of processes
    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    // Taking input for each process
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter AT and BT for p%d: ", p[i].pid);
        scanf("%d %d", &p[i].arrivalTime, &p[i].burstTime);
        p[i].remainingTime = p[i].burstTime; // Initially, remaining time = burst time
    }

    // Execution order tracker (for Gantt chart)
    printf("\nExecution Order (Gantt Chart style):\n");

    // Loop until all processes are completed
    while (completed != n) {
        int idx = -1;          // Index of process to execute
        int minRemaining = INT_MAX;

        // Select the process with the shortest remaining time among the arrived processes
        for (int i = 0; i < n; i++) {
            if (p[i].arrivalTime <= currentTime && p[i].remainingTime > 0) {
                if (p[i].remainingTime < minRemaining) {
                    minRemaining = p[i].remainingTime;
                    idx = i;
                }
            }
        }

        if (idx != -1) {
            // Execute the selected process for 1 time unit
            printf("p%d ", p[idx].pid);
            p[idx].remainingTime--;
            currentTime++;

            // If process is completed
            if (p[idx].remainingTime == 0) {
                completed++;
                p[idx].completionTime = currentTime;
                p[idx].turnaroundTime = p[idx].completionTime - p[idx].arrivalTime;
                p[idx].waitingTime = p[idx].turnaroundTime - p[idx].burstTime;
                avgTAT += p[idx].turnaroundTime;
                avgWT += p[idx].waitingTime;
            }
        } else {
            // No process has arrived yet, so CPU is idle
            printf("idle ");
            currentTime++;
        }
    }

    // Printing table
    printf("\n\n| PID | AT | BT | CT | TAT | WT |\n");
    printf("| :-: | :-:| :-:| :-:| :-: | :-:|\n");
    for (int i = 0; i < n; i++) {
        printf("| p%d  | %2d | %2d | %2d | %3d | %2d |\n",
               p[i].pid, p[i].arrivalTime, p[i].burstTime,
               p[i].completionTime, p[i].turnaroundTime, p[i].waitingTime);
    }

    // Printing averages
    printf("\nAverage Turnaround Time = %.2f", avgTAT / n);
    printf("\nAverage Waiting Time = %.2f\n", avgWT / n);

    return 0;
}
